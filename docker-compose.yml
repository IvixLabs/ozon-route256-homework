x-postgres-common:
  &postgres-common
  image: postgres:16.3-alpine
  shm_size: 128mb
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=loms'
    interval: 10s
    timeout: 5s
    retries: 5

services:

  transactionalbox:
    container_name: transactionalbox
    image: transactionalbox
    build:
      context: ./transactionalbox
      dockerfile: ./build/Dockerfile
      target: base
    env_file:
      - ./transactionalbox/.env.docker
    depends_on:
      loms_master_db:
        condition: service_healthy

  cart:
    container_name: cart
    image: cart
    build:
      context: ./cart
      dockerfile: ./build/Dockerfile
      target: run
    env_file:
      - ./cart/.env.docker
    ports:
      - "8082:8082" # HTTP
      - "8085:8085" # debug server
    depends_on:
      - loms


  loms_migrate:
    container_name: loms_migrate
    build:
      context: ./loms
      dockerfile: ./build/Dockerfile
      target: migrate
    env_file:
      - ./loms/.env.docker.shard1
    depends_on:
      loms_master_db:
        condition: service_healthy
        
  loms_reset_stocks:
    container_name: loms_reset_stocks
    build:
      context: ./loms
      dockerfile: ./build/Dockerfile
      target: reset_stocks
    env_file:
      - ./loms/.env.docker.shard1
    depends_on:
      loms_master_db:
        condition: service_healthy
      loms_migrate:
        condition: service_completed_successfully

  loms_migrate1:
    container_name: loms_migrate1
    build:
      context: ./loms
      dockerfile: ./build/Dockerfile
      target: migrate
    env_file:
      - ./loms/.env.docker.shard2
    depends_on:
      loms_master_db1:
        condition: service_healthy
  

  loms:
    container_name: loms
    image: loms
    build:
      context: ./loms
      dockerfile: ./build/Dockerfile
      target: run
    env_file:
      - ./loms/.env.docker
    ports:
      - "50051:50051" #GRPC
      - "8083:8083" # REST
      - "8084:8084" #debug server
    depends_on:
      loms_master_db:
        condition: service_healthy
      kafka0:
        condition: service_healthy
      transactionalbox:
        condition: service_completed_successfully
      loms_migrate:
        condition: service_completed_successfully
      loms_migrate1:
        condition: service_completed_successfully
      loms_reset_stocks:
        condition: service_completed_successfully
        
  notifier1:
    container_name: notifier1
    image: notifier
    build:
      context: ./notifier
      dockerfile: ./build/Dockerfile
      target: run
    env_file:
      - ./notifier/.env.docker
    ports:
      - "8086:8086" # debug server
    depends_on:
      kafka0:
        condition: service_healthy
        
  notifier2:
    container_name: notifier2
    image: notifier
    build:
      context: ./notifier
      dockerfile: ./build/Dockerfile
      target: run
    env_file:
      - ./notifier/.env.docker
    ports:
      - "8087:8086" # debug server
    depends_on:
      kafka0:
        condition: service_healthy
        
  notifier3:
    container_name: notifier3
    image: notifier
    build:
      context: ./notifier
      dockerfile: ./build/Dockerfile
      target: run
    env_file:
      - ./notifier/.env.docker
    ports:
      - "8088:8086" # debug server
    depends_on:
      kafka0:
        condition: service_healthy
        
        
  loms_master_db:
    <<: *postgres-common
    volumes:
      - ./docker-compose-data/postgres/master-data:/var/lib/postgresql/data
      - ./docker-compose-data/postgres/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: loms
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: master
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
    command: | 
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      
  loms_sync_slave_db:
    <<: *postgres-common
    volumes:
      - ./docker-compose-data/postgres/sync-slave-data:/var/lib/postgresql/data
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: master
      PGUSER: replicator
      PGPASSWORD: replicator_password
    ports:
      - "5433:5432"
    command: |
      bash -c "
      if [ ! -d /var/lib/postgresql/data/pgdata ]; then
      until pg_basebackup --pgdata=/var/lib/postgresql/data/pgdata -R --slot=replication_slot --host=loms_master_db --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data/pgdata
      fi
      postgres
      "
    depends_on:
      - loms_master_db
        
  loms_master_db1:
    <<: *postgres-common
    volumes:
      - ./docker-compose-data/postgres/master-data1:/var/lib/postgresql/data
      - ./docker-compose-data/postgres/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: loms
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: master
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
  
  loms_sync_slave_db1:
    <<: *postgres-common
    volumes:
      - ./docker-compose-data/postgres/sync-slave-data1:/var/lib/postgresql/data
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: master
      PGUSER: replicator
      PGPASSWORD: replicator_password
    ports:
      - "5435:5432"
    command: |
      bash -c "
      if [ ! -d /var/lib/postgresql/data/pgdata ]; then
      until pg_basebackup --pgdata=/var/lib/postgresql/data/pgdata -R --slot=replication_slot --host=loms_master_db1 --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data/pgdata
      fi
      postgres
      "
    depends_on:
      - loms_master_db

  prometheus:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/prometheus:v2.36.2
    volumes:
      - ./docker-compose-data/prometheus/etc:/etc/prometheus/
      - ./docker-compose-data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
        
  grafana:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/grafana:latest
    volumes:
      - ./docker-compose-data/grafana/data:/var/lib/grafana
      - ./docker-compose-data/grafana/provisioning:/etc/grafana/provisioning/
    ports:
      - "3000:3000"

  jaeger:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/jaegertracing:latest
    ports:
      - "16686:16686"
      - "4318:4318"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"
#    depends_on:
#      - kafka-init-topics

  kafka0:
    image: confluentinc/cp-kafka:7.5.4
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kafka-logs/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
  #    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    volumes:
      - ./docker-compose-data/kafka/data/logs:/tmp/kafka-logs
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.5.4
    depends_on:
      kafka0:
        condition: service_healthy
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:29092 1 30 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"

  redis:
    image: redis:7.2
    ports:
      - 6379:6379
