// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/usecase/cart.LOMSClient -o loms_client_mock.go -n LOMSClientMock -p mock

import (
	"context"
	"route256/cart/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LOMSClientMock implements cart.LOMSClient
type LOMSClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, cart *model.Cart) (o1 model.OrderID, err error)
	inspectFuncCreateOrder   func(ctx context.Context, cart *model.Cart)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLOMSClientMockCreateOrder

	funcGetStockCount          func(ctx context.Context, sku model.Sku) (c2 model.Count, err error)
	inspectFuncGetStockCount   func(ctx context.Context, sku model.Sku)
	afterGetStockCountCounter  uint64
	beforeGetStockCountCounter uint64
	GetStockCountMock          mLOMSClientMockGetStockCount
}

// NewLOMSClientMock returns a mock for cart.LOMSClient
func NewLOMSClientMock(t minimock.Tester) *LOMSClientMock {
	m := &LOMSClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLOMSClientMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LOMSClientMockCreateOrderParams{}

	m.GetStockCountMock = mLOMSClientMockGetStockCount{mock: m}
	m.GetStockCountMock.callArgs = []*LOMSClientMockGetStockCountParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLOMSClientMockCreateOrder struct {
	optional           bool
	mock               *LOMSClientMock
	defaultExpectation *LOMSClientMockCreateOrderExpectation
	expectations       []*LOMSClientMockCreateOrderExpectation

	callArgs []*LOMSClientMockCreateOrderParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LOMSClientMockCreateOrderExpectation specifies expectation struct of the LOMSClient.CreateOrder
type LOMSClientMockCreateOrderExpectation struct {
	mock      *LOMSClientMock
	params    *LOMSClientMockCreateOrderParams
	paramPtrs *LOMSClientMockCreateOrderParamPtrs
	results   *LOMSClientMockCreateOrderResults
	Counter   uint64
}

// LOMSClientMockCreateOrderParams contains parameters of the LOMSClient.CreateOrder
type LOMSClientMockCreateOrderParams struct {
	ctx  context.Context
	cart *model.Cart
}

// LOMSClientMockCreateOrderParamPtrs contains pointers to parameters of the LOMSClient.CreateOrder
type LOMSClientMockCreateOrderParamPtrs struct {
	ctx  *context.Context
	cart **model.Cart
}

// LOMSClientMockCreateOrderResults contains results of the LOMSClient.CreateOrder
type LOMSClientMockCreateOrderResults struct {
	o1  model.OrderID
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateOrder *mLOMSClientMockCreateOrder) Optional() *mLOMSClientMockCreateOrder {
	mmCreateOrder.optional = true
	return mmCreateOrder
}

// Expect sets up expected params for LOMSClient.CreateOrder
func (mmCreateOrder *mLOMSClientMockCreateOrder) Expect(ctx context.Context, cart *model.Cart) *mLOMSClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.paramPtrs != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by ExpectParams functions")
	}

	mmCreateOrder.defaultExpectation.params = &LOMSClientMockCreateOrderParams{ctx, cart}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// ExpectCtxParam1 sets up expected param ctx for LOMSClient.CreateOrder
func (mmCreateOrder *mLOMSClientMockCreateOrder) ExpectCtxParam1(ctx context.Context) *mLOMSClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LOMSClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateOrder
}

// ExpectCartParam2 sets up expected param cart for LOMSClient.CreateOrder
func (mmCreateOrder *mLOMSClientMockCreateOrder) ExpectCartParam2(cart *model.Cart) *mLOMSClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LOMSClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.cart = &cart

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the LOMSClient.CreateOrder
func (mmCreateOrder *mLOMSClientMockCreateOrder) Inspect(f func(ctx context.Context, cart *model.Cart)) *mLOMSClientMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LOMSClientMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by LOMSClient.CreateOrder
func (mmCreateOrder *mLOMSClientMockCreateOrder) Return(o1 model.OrderID, err error) *LOMSClientMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSClientMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LOMSClientMockCreateOrderResults{o1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the LOMSClient.CreateOrder method
func (mmCreateOrder *mLOMSClientMockCreateOrder) Set(f func(ctx context.Context, cart *model.Cart) (o1 model.OrderID, err error)) *LOMSClientMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the LOMSClient.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the LOMSClient.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the LOMSClient.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLOMSClientMockCreateOrder) When(ctx context.Context, cart *model.Cart) *LOMSClientMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSClientMock.CreateOrder mock is already set by Set")
	}

	expectation := &LOMSClientMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &LOMSClientMockCreateOrderParams{ctx, cart},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up LOMSClient.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LOMSClientMockCreateOrderExpectation) Then(o1 model.OrderID, err error) *LOMSClientMock {
	e.results = &LOMSClientMockCreateOrderResults{o1, err}
	return e.mock
}

// Times sets number of times LOMSClient.CreateOrder should be invoked
func (mmCreateOrder *mLOMSClientMockCreateOrder) Times(n uint64) *mLOMSClientMockCreateOrder {
	if n == 0 {
		mmCreateOrder.mock.t.Fatalf("Times of LOMSClientMock.CreateOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateOrder.expectedInvocations, n)
	return mmCreateOrder
}

func (mmCreateOrder *mLOMSClientMockCreateOrder) invocationsDone() bool {
	if len(mmCreateOrder.expectations) == 0 && mmCreateOrder.defaultExpectation == nil && mmCreateOrder.mock.funcCreateOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateOrder.mock.afterCreateOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateOrder implements cart.LOMSClient
func (mmCreateOrder *LOMSClientMock) CreateOrder(ctx context.Context, cart *model.Cart) (o1 model.OrderID, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, cart)
	}

	mm_params := LOMSClientMockCreateOrderParams{ctx, cart}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.o1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_want_ptrs := mmCreateOrder.CreateOrderMock.defaultExpectation.paramPtrs

		mm_got := LOMSClientMockCreateOrderParams{ctx, cart}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateOrder.t.Errorf("LOMSClientMock.CreateOrder got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cart != nil && !minimock.Equal(*mm_want_ptrs.cart, mm_got.cart) {
				mmCreateOrder.t.Errorf("LOMSClientMock.CreateOrder got unexpected parameter cart, want: %#v, got: %#v%s\n", *mm_want_ptrs.cart, mm_got.cart, minimock.Diff(*mm_want_ptrs.cart, mm_got.cart))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LOMSClientMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LOMSClientMock.CreateOrder")
		}
		return (*mm_results).o1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, cart)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LOMSClientMock.CreateOrder. %v %v", ctx, cart)
	return
}

// CreateOrderAfterCounter returns a count of finished LOMSClientMock.CreateOrder invocations
func (mmCreateOrder *LOMSClientMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LOMSClientMock.CreateOrder invocations
func (mmCreateOrder *LOMSClientMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LOMSClientMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLOMSClientMockCreateOrder) Calls() []*LOMSClientMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LOMSClientMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LOMSClientMock) MinimockCreateOrderDone() bool {
	if m.CreateOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateOrderMock.invocationsDone()
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LOMSClientMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LOMSClientMock.CreateOrder with params: %#v", *e.params)
		}
	}

	afterCreateOrderCounter := mm_atomic.LoadUint64(&m.afterCreateOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && afterCreateOrderCounter < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LOMSClientMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to LOMSClientMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && afterCreateOrderCounter < 1 {
		m.t.Error("Expected call to LOMSClientMock.CreateOrder")
	}

	if !m.CreateOrderMock.invocationsDone() && afterCreateOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to LOMSClientMock.CreateOrder but found %d calls",
			mm_atomic.LoadUint64(&m.CreateOrderMock.expectedInvocations), afterCreateOrderCounter)
	}
}

type mLOMSClientMockGetStockCount struct {
	optional           bool
	mock               *LOMSClientMock
	defaultExpectation *LOMSClientMockGetStockCountExpectation
	expectations       []*LOMSClientMockGetStockCountExpectation

	callArgs []*LOMSClientMockGetStockCountParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LOMSClientMockGetStockCountExpectation specifies expectation struct of the LOMSClient.GetStockCount
type LOMSClientMockGetStockCountExpectation struct {
	mock      *LOMSClientMock
	params    *LOMSClientMockGetStockCountParams
	paramPtrs *LOMSClientMockGetStockCountParamPtrs
	results   *LOMSClientMockGetStockCountResults
	Counter   uint64
}

// LOMSClientMockGetStockCountParams contains parameters of the LOMSClient.GetStockCount
type LOMSClientMockGetStockCountParams struct {
	ctx context.Context
	sku model.Sku
}

// LOMSClientMockGetStockCountParamPtrs contains pointers to parameters of the LOMSClient.GetStockCount
type LOMSClientMockGetStockCountParamPtrs struct {
	ctx *context.Context
	sku *model.Sku
}

// LOMSClientMockGetStockCountResults contains results of the LOMSClient.GetStockCount
type LOMSClientMockGetStockCountResults struct {
	c2  model.Count
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStockCount *mLOMSClientMockGetStockCount) Optional() *mLOMSClientMockGetStockCount {
	mmGetStockCount.optional = true
	return mmGetStockCount
}

// Expect sets up expected params for LOMSClient.GetStockCount
func (mmGetStockCount *mLOMSClientMockGetStockCount) Expect(ctx context.Context, sku model.Sku) *mLOMSClientMockGetStockCount {
	if mmGetStockCount.mock.funcGetStockCount != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by Set")
	}

	if mmGetStockCount.defaultExpectation == nil {
		mmGetStockCount.defaultExpectation = &LOMSClientMockGetStockCountExpectation{}
	}

	if mmGetStockCount.defaultExpectation.paramPtrs != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by ExpectParams functions")
	}

	mmGetStockCount.defaultExpectation.params = &LOMSClientMockGetStockCountParams{ctx, sku}
	for _, e := range mmGetStockCount.expectations {
		if minimock.Equal(e.params, mmGetStockCount.defaultExpectation.params) {
			mmGetStockCount.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockCount.defaultExpectation.params)
		}
	}

	return mmGetStockCount
}

// ExpectCtxParam1 sets up expected param ctx for LOMSClient.GetStockCount
func (mmGetStockCount *mLOMSClientMockGetStockCount) ExpectCtxParam1(ctx context.Context) *mLOMSClientMockGetStockCount {
	if mmGetStockCount.mock.funcGetStockCount != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by Set")
	}

	if mmGetStockCount.defaultExpectation == nil {
		mmGetStockCount.defaultExpectation = &LOMSClientMockGetStockCountExpectation{}
	}

	if mmGetStockCount.defaultExpectation.params != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by Expect")
	}

	if mmGetStockCount.defaultExpectation.paramPtrs == nil {
		mmGetStockCount.defaultExpectation.paramPtrs = &LOMSClientMockGetStockCountParamPtrs{}
	}
	mmGetStockCount.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetStockCount
}

// ExpectSkuParam2 sets up expected param sku for LOMSClient.GetStockCount
func (mmGetStockCount *mLOMSClientMockGetStockCount) ExpectSkuParam2(sku model.Sku) *mLOMSClientMockGetStockCount {
	if mmGetStockCount.mock.funcGetStockCount != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by Set")
	}

	if mmGetStockCount.defaultExpectation == nil {
		mmGetStockCount.defaultExpectation = &LOMSClientMockGetStockCountExpectation{}
	}

	if mmGetStockCount.defaultExpectation.params != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by Expect")
	}

	if mmGetStockCount.defaultExpectation.paramPtrs == nil {
		mmGetStockCount.defaultExpectation.paramPtrs = &LOMSClientMockGetStockCountParamPtrs{}
	}
	mmGetStockCount.defaultExpectation.paramPtrs.sku = &sku

	return mmGetStockCount
}

// Inspect accepts an inspector function that has same arguments as the LOMSClient.GetStockCount
func (mmGetStockCount *mLOMSClientMockGetStockCount) Inspect(f func(ctx context.Context, sku model.Sku)) *mLOMSClientMockGetStockCount {
	if mmGetStockCount.mock.inspectFuncGetStockCount != nil {
		mmGetStockCount.mock.t.Fatalf("Inspect function is already set for LOMSClientMock.GetStockCount")
	}

	mmGetStockCount.mock.inspectFuncGetStockCount = f

	return mmGetStockCount
}

// Return sets up results that will be returned by LOMSClient.GetStockCount
func (mmGetStockCount *mLOMSClientMockGetStockCount) Return(c2 model.Count, err error) *LOMSClientMock {
	if mmGetStockCount.mock.funcGetStockCount != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by Set")
	}

	if mmGetStockCount.defaultExpectation == nil {
		mmGetStockCount.defaultExpectation = &LOMSClientMockGetStockCountExpectation{mock: mmGetStockCount.mock}
	}
	mmGetStockCount.defaultExpectation.results = &LOMSClientMockGetStockCountResults{c2, err}
	return mmGetStockCount.mock
}

// Set uses given function f to mock the LOMSClient.GetStockCount method
func (mmGetStockCount *mLOMSClientMockGetStockCount) Set(f func(ctx context.Context, sku model.Sku) (c2 model.Count, err error)) *LOMSClientMock {
	if mmGetStockCount.defaultExpectation != nil {
		mmGetStockCount.mock.t.Fatalf("Default expectation is already set for the LOMSClient.GetStockCount method")
	}

	if len(mmGetStockCount.expectations) > 0 {
		mmGetStockCount.mock.t.Fatalf("Some expectations are already set for the LOMSClient.GetStockCount method")
	}

	mmGetStockCount.mock.funcGetStockCount = f
	return mmGetStockCount.mock
}

// When sets expectation for the LOMSClient.GetStockCount which will trigger the result defined by the following
// Then helper
func (mmGetStockCount *mLOMSClientMockGetStockCount) When(ctx context.Context, sku model.Sku) *LOMSClientMockGetStockCountExpectation {
	if mmGetStockCount.mock.funcGetStockCount != nil {
		mmGetStockCount.mock.t.Fatalf("LOMSClientMock.GetStockCount mock is already set by Set")
	}

	expectation := &LOMSClientMockGetStockCountExpectation{
		mock:   mmGetStockCount.mock,
		params: &LOMSClientMockGetStockCountParams{ctx, sku},
	}
	mmGetStockCount.expectations = append(mmGetStockCount.expectations, expectation)
	return expectation
}

// Then sets up LOMSClient.GetStockCount return parameters for the expectation previously defined by the When method
func (e *LOMSClientMockGetStockCountExpectation) Then(c2 model.Count, err error) *LOMSClientMock {
	e.results = &LOMSClientMockGetStockCountResults{c2, err}
	return e.mock
}

// Times sets number of times LOMSClient.GetStockCount should be invoked
func (mmGetStockCount *mLOMSClientMockGetStockCount) Times(n uint64) *mLOMSClientMockGetStockCount {
	if n == 0 {
		mmGetStockCount.mock.t.Fatalf("Times of LOMSClientMock.GetStockCount mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStockCount.expectedInvocations, n)
	return mmGetStockCount
}

func (mmGetStockCount *mLOMSClientMockGetStockCount) invocationsDone() bool {
	if len(mmGetStockCount.expectations) == 0 && mmGetStockCount.defaultExpectation == nil && mmGetStockCount.mock.funcGetStockCount == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStockCount.mock.afterGetStockCountCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStockCount.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStockCount implements cart.LOMSClient
func (mmGetStockCount *LOMSClientMock) GetStockCount(ctx context.Context, sku model.Sku) (c2 model.Count, err error) {
	mm_atomic.AddUint64(&mmGetStockCount.beforeGetStockCountCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockCount.afterGetStockCountCounter, 1)

	if mmGetStockCount.inspectFuncGetStockCount != nil {
		mmGetStockCount.inspectFuncGetStockCount(ctx, sku)
	}

	mm_params := LOMSClientMockGetStockCountParams{ctx, sku}

	// Record call args
	mmGetStockCount.GetStockCountMock.mutex.Lock()
	mmGetStockCount.GetStockCountMock.callArgs = append(mmGetStockCount.GetStockCountMock.callArgs, &mm_params)
	mmGetStockCount.GetStockCountMock.mutex.Unlock()

	for _, e := range mmGetStockCount.GetStockCountMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmGetStockCount.GetStockCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockCount.GetStockCountMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockCount.GetStockCountMock.defaultExpectation.params
		mm_want_ptrs := mmGetStockCount.GetStockCountMock.defaultExpectation.paramPtrs

		mm_got := LOMSClientMockGetStockCountParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStockCount.t.Errorf("LOMSClientMock.GetStockCount got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetStockCount.t.Errorf("LOMSClientMock.GetStockCount got unexpected parameter sku, want: %#v, got: %#v%s\n", *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockCount.t.Errorf("LOMSClientMock.GetStockCount got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockCount.GetStockCountMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockCount.t.Fatal("No results are set for the LOMSClientMock.GetStockCount")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmGetStockCount.funcGetStockCount != nil {
		return mmGetStockCount.funcGetStockCount(ctx, sku)
	}
	mmGetStockCount.t.Fatalf("Unexpected call to LOMSClientMock.GetStockCount. %v %v", ctx, sku)
	return
}

// GetStockCountAfterCounter returns a count of finished LOMSClientMock.GetStockCount invocations
func (mmGetStockCount *LOMSClientMock) GetStockCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockCount.afterGetStockCountCounter)
}

// GetStockCountBeforeCounter returns a count of LOMSClientMock.GetStockCount invocations
func (mmGetStockCount *LOMSClientMock) GetStockCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockCount.beforeGetStockCountCounter)
}

// Calls returns a list of arguments used in each call to LOMSClientMock.GetStockCount.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockCount *mLOMSClientMockGetStockCount) Calls() []*LOMSClientMockGetStockCountParams {
	mmGetStockCount.mutex.RLock()

	argCopy := make([]*LOMSClientMockGetStockCountParams, len(mmGetStockCount.callArgs))
	copy(argCopy, mmGetStockCount.callArgs)

	mmGetStockCount.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockCountDone returns true if the count of the GetStockCount invocations corresponds
// the number of defined expectations
func (m *LOMSClientMock) MinimockGetStockCountDone() bool {
	if m.GetStockCountMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockCountMock.invocationsDone()
}

// MinimockGetStockCountInspect logs each unmet expectation
func (m *LOMSClientMock) MinimockGetStockCountInspect() {
	for _, e := range m.GetStockCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LOMSClientMock.GetStockCount with params: %#v", *e.params)
		}
	}

	afterGetStockCountCounter := mm_atomic.LoadUint64(&m.afterGetStockCountCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockCountMock.defaultExpectation != nil && afterGetStockCountCounter < 1 {
		if m.GetStockCountMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LOMSClientMock.GetStockCount")
		} else {
			m.t.Errorf("Expected call to LOMSClientMock.GetStockCount with params: %#v", *m.GetStockCountMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockCount != nil && afterGetStockCountCounter < 1 {
		m.t.Error("Expected call to LOMSClientMock.GetStockCount")
	}

	if !m.GetStockCountMock.invocationsDone() && afterGetStockCountCounter > 0 {
		m.t.Errorf("Expected %d calls to LOMSClientMock.GetStockCount but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockCountMock.expectedInvocations), afterGetStockCountCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LOMSClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()

			m.MinimockGetStockCountInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LOMSClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LOMSClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockGetStockCountDone()
}
