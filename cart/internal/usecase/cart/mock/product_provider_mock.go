// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/usecase/cart.ProductProvider -o product_provider_mock.go -n ProductProviderMock -p mock

import (
	"context"
	"route256/cart/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductProviderMock implements cart.ProductProvider
type ProductProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGet          func(ctx context.Context, sku model.Sku) (p1 model.Product, err error)
	inspectFuncGet   func(ctx context.Context, sku model.Sku)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mProductProviderMockGet
}

// NewProductProviderMock returns a mock for cart.ProductProvider
func NewProductProviderMock(t minimock.Tester) *ProductProviderMock {
	m := &ProductProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mProductProviderMockGet{mock: m}
	m.GetMock.callArgs = []*ProductProviderMockGetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductProviderMockGet struct {
	optional           bool
	mock               *ProductProviderMock
	defaultExpectation *ProductProviderMockGetExpectation
	expectations       []*ProductProviderMockGetExpectation

	callArgs []*ProductProviderMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ProductProviderMockGetExpectation specifies expectation struct of the ProductProvider.Get
type ProductProviderMockGetExpectation struct {
	mock      *ProductProviderMock
	params    *ProductProviderMockGetParams
	paramPtrs *ProductProviderMockGetParamPtrs
	results   *ProductProviderMockGetResults
	Counter   uint64
}

// ProductProviderMockGetParams contains parameters of the ProductProvider.Get
type ProductProviderMockGetParams struct {
	ctx context.Context
	sku model.Sku
}

// ProductProviderMockGetParamPtrs contains pointers to parameters of the ProductProvider.Get
type ProductProviderMockGetParamPtrs struct {
	ctx *context.Context
	sku *model.Sku
}

// ProductProviderMockGetResults contains results of the ProductProvider.Get
type ProductProviderMockGetResults struct {
	p1  model.Product
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mProductProviderMockGet) Optional() *mProductProviderMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for ProductProvider.Get
func (mmGet *mProductProviderMockGet) Expect(ctx context.Context, sku model.Sku) *mProductProviderMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductProviderMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &ProductProviderMockGetParams{ctx, sku}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for ProductProvider.Get
func (mmGet *mProductProviderMockGet) ExpectCtxParam1(ctx context.Context) *mProductProviderMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductProviderMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ProductProviderMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectSkuParam2 sets up expected param sku for ProductProvider.Get
func (mmGet *mProductProviderMockGet) ExpectSkuParam2(sku model.Sku) *mProductProviderMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductProviderMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ProductProviderMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.sku = &sku

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ProductProvider.Get
func (mmGet *mProductProviderMockGet) Inspect(f func(ctx context.Context, sku model.Sku)) *mProductProviderMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ProductProviderMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ProductProvider.Get
func (mmGet *mProductProviderMockGet) Return(p1 model.Product, err error) *ProductProviderMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ProductProviderMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ProductProviderMockGetResults{p1, err}
	return mmGet.mock
}

// Set uses given function f to mock the ProductProvider.Get method
func (mmGet *mProductProviderMockGet) Set(f func(ctx context.Context, sku model.Sku) (p1 model.Product, err error)) *ProductProviderMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ProductProvider.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ProductProvider.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the ProductProvider.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mProductProviderMockGet) When(ctx context.Context, sku model.Sku) *ProductProviderMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ProductProviderMock.Get mock is already set by Set")
	}

	expectation := &ProductProviderMockGetExpectation{
		mock:   mmGet.mock,
		params: &ProductProviderMockGetParams{ctx, sku},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ProductProvider.Get return parameters for the expectation previously defined by the When method
func (e *ProductProviderMockGetExpectation) Then(p1 model.Product, err error) *ProductProviderMock {
	e.results = &ProductProviderMockGetResults{p1, err}
	return e.mock
}

// Times sets number of times ProductProvider.Get should be invoked
func (mmGet *mProductProviderMockGet) Times(n uint64) *mProductProviderMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of ProductProviderMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mProductProviderMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements cart.ProductProvider
func (mmGet *ProductProviderMock) Get(ctx context.Context, sku model.Sku) (p1 model.Product, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, sku)
	}

	mm_params := ProductProviderMockGetParams{ctx, sku}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := ProductProviderMockGetParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("ProductProviderMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGet.t.Errorf("ProductProviderMock.Get got unexpected parameter sku, want: %#v, got: %#v%s\n", *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ProductProviderMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ProductProviderMock.Get")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, sku)
	}
	mmGet.t.Fatalf("Unexpected call to ProductProviderMock.Get. %v %v", ctx, sku)
	return
}

// GetAfterCounter returns a count of finished ProductProviderMock.Get invocations
func (mmGet *ProductProviderMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ProductProviderMock.Get invocations
func (mmGet *ProductProviderMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ProductProviderMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mProductProviderMockGet) Calls() []*ProductProviderMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ProductProviderMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ProductProviderMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *ProductProviderMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductProviderMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductProviderMock.Get")
		} else {
			m.t.Errorf("Expected call to ProductProviderMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to ProductProviderMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductProviderMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone()
}
