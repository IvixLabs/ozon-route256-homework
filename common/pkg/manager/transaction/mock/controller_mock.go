// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

//go:generate minimock -i route256/common/pkg/manager/transaction.Controller -o controller_mock.go -n ControllerMock -p mock

import (
	"context"
	mm_transaction "route256/common/pkg/manager/transaction"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ControllerMock implements transaction.Controller
type ControllerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcBegin          func(ctx context.Context) (t1 mm_transaction.Transaction, c2 context.Context, err error)
	inspectFuncBegin   func(ctx context.Context)
	afterBeginCounter  uint64
	beforeBeginCounter uint64
	BeginMock          mControllerMockBegin
}

// NewControllerMock returns a mock for transaction.Controller
func NewControllerMock(t minimock.Tester) *ControllerMock {
	m := &ControllerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BeginMock = mControllerMockBegin{mock: m}
	m.BeginMock.callArgs = []*ControllerMockBeginParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mControllerMockBegin struct {
	optional           bool
	mock               *ControllerMock
	defaultExpectation *ControllerMockBeginExpectation
	expectations       []*ControllerMockBeginExpectation

	callArgs []*ControllerMockBeginParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ControllerMockBeginExpectation specifies expectation struct of the Controller.Begin
type ControllerMockBeginExpectation struct {
	mock      *ControllerMock
	params    *ControllerMockBeginParams
	paramPtrs *ControllerMockBeginParamPtrs
	results   *ControllerMockBeginResults
	Counter   uint64
}

// ControllerMockBeginParams contains parameters of the Controller.Begin
type ControllerMockBeginParams struct {
	ctx context.Context
}

// ControllerMockBeginParamPtrs contains pointers to parameters of the Controller.Begin
type ControllerMockBeginParamPtrs struct {
	ctx *context.Context
}

// ControllerMockBeginResults contains results of the Controller.Begin
type ControllerMockBeginResults struct {
	t1  mm_transaction.Transaction
	c2  context.Context
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmBegin *mControllerMockBegin) Optional() *mControllerMockBegin {
	mmBegin.optional = true
	return mmBegin
}

// Expect sets up expected params for Controller.Begin
func (mmBegin *mControllerMockBegin) Expect(ctx context.Context) *mControllerMockBegin {
	if mmBegin.mock.funcBegin != nil {
		mmBegin.mock.t.Fatalf("ControllerMock.Begin mock is already set by Set")
	}

	if mmBegin.defaultExpectation == nil {
		mmBegin.defaultExpectation = &ControllerMockBeginExpectation{}
	}

	if mmBegin.defaultExpectation.paramPtrs != nil {
		mmBegin.mock.t.Fatalf("ControllerMock.Begin mock is already set by ExpectParams functions")
	}

	mmBegin.defaultExpectation.params = &ControllerMockBeginParams{ctx}
	for _, e := range mmBegin.expectations {
		if minimock.Equal(e.params, mmBegin.defaultExpectation.params) {
			mmBegin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBegin.defaultExpectation.params)
		}
	}

	return mmBegin
}

// ExpectCtxParam1 sets up expected param ctx for Controller.Begin
func (mmBegin *mControllerMockBegin) ExpectCtxParam1(ctx context.Context) *mControllerMockBegin {
	if mmBegin.mock.funcBegin != nil {
		mmBegin.mock.t.Fatalf("ControllerMock.Begin mock is already set by Set")
	}

	if mmBegin.defaultExpectation == nil {
		mmBegin.defaultExpectation = &ControllerMockBeginExpectation{}
	}

	if mmBegin.defaultExpectation.params != nil {
		mmBegin.mock.t.Fatalf("ControllerMock.Begin mock is already set by Expect")
	}

	if mmBegin.defaultExpectation.paramPtrs == nil {
		mmBegin.defaultExpectation.paramPtrs = &ControllerMockBeginParamPtrs{}
	}
	mmBegin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmBegin
}

// Inspect accepts an inspector function that has same arguments as the Controller.Begin
func (mmBegin *mControllerMockBegin) Inspect(f func(ctx context.Context)) *mControllerMockBegin {
	if mmBegin.mock.inspectFuncBegin != nil {
		mmBegin.mock.t.Fatalf("Inspect function is already set for ControllerMock.Begin")
	}

	mmBegin.mock.inspectFuncBegin = f

	return mmBegin
}

// Return sets up results that will be returned by Controller.Begin
func (mmBegin *mControllerMockBegin) Return(t1 mm_transaction.Transaction, c2 context.Context, err error) *ControllerMock {
	if mmBegin.mock.funcBegin != nil {
		mmBegin.mock.t.Fatalf("ControllerMock.Begin mock is already set by Set")
	}

	if mmBegin.defaultExpectation == nil {
		mmBegin.defaultExpectation = &ControllerMockBeginExpectation{mock: mmBegin.mock}
	}
	mmBegin.defaultExpectation.results = &ControllerMockBeginResults{t1, c2, err}
	return mmBegin.mock
}

// Set uses given function f to mock the Controller.Begin method
func (mmBegin *mControllerMockBegin) Set(f func(ctx context.Context) (t1 mm_transaction.Transaction, c2 context.Context, err error)) *ControllerMock {
	if mmBegin.defaultExpectation != nil {
		mmBegin.mock.t.Fatalf("Default expectation is already set for the Controller.Begin method")
	}

	if len(mmBegin.expectations) > 0 {
		mmBegin.mock.t.Fatalf("Some expectations are already set for the Controller.Begin method")
	}

	mmBegin.mock.funcBegin = f
	return mmBegin.mock
}

// When sets expectation for the Controller.Begin which will trigger the result defined by the following
// Then helper
func (mmBegin *mControllerMockBegin) When(ctx context.Context) *ControllerMockBeginExpectation {
	if mmBegin.mock.funcBegin != nil {
		mmBegin.mock.t.Fatalf("ControllerMock.Begin mock is already set by Set")
	}

	expectation := &ControllerMockBeginExpectation{
		mock:   mmBegin.mock,
		params: &ControllerMockBeginParams{ctx},
	}
	mmBegin.expectations = append(mmBegin.expectations, expectation)
	return expectation
}

// Then sets up Controller.Begin return parameters for the expectation previously defined by the When method
func (e *ControllerMockBeginExpectation) Then(t1 mm_transaction.Transaction, c2 context.Context, err error) *ControllerMock {
	e.results = &ControllerMockBeginResults{t1, c2, err}
	return e.mock
}

// Times sets number of times Controller.Begin should be invoked
func (mmBegin *mControllerMockBegin) Times(n uint64) *mControllerMockBegin {
	if n == 0 {
		mmBegin.mock.t.Fatalf("Times of ControllerMock.Begin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmBegin.expectedInvocations, n)
	return mmBegin
}

func (mmBegin *mControllerMockBegin) invocationsDone() bool {
	if len(mmBegin.expectations) == 0 && mmBegin.defaultExpectation == nil && mmBegin.mock.funcBegin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmBegin.mock.afterBeginCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmBegin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Begin implements transaction.Controller
func (mmBegin *ControllerMock) Begin(ctx context.Context) (t1 mm_transaction.Transaction, c2 context.Context, err error) {
	mm_atomic.AddUint64(&mmBegin.beforeBeginCounter, 1)
	defer mm_atomic.AddUint64(&mmBegin.afterBeginCounter, 1)

	if mmBegin.inspectFuncBegin != nil {
		mmBegin.inspectFuncBegin(ctx)
	}

	mm_params := ControllerMockBeginParams{ctx}

	// Record call args
	mmBegin.BeginMock.mutex.Lock()
	mmBegin.BeginMock.callArgs = append(mmBegin.BeginMock.callArgs, &mm_params)
	mmBegin.BeginMock.mutex.Unlock()

	for _, e := range mmBegin.BeginMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.t1, e.results.c2, e.results.err
		}
	}

	if mmBegin.BeginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBegin.BeginMock.defaultExpectation.Counter, 1)
		mm_want := mmBegin.BeginMock.defaultExpectation.params
		mm_want_ptrs := mmBegin.BeginMock.defaultExpectation.paramPtrs

		mm_got := ControllerMockBeginParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmBegin.t.Errorf("ControllerMock.Begin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBegin.t.Errorf("ControllerMock.Begin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBegin.BeginMock.defaultExpectation.results
		if mm_results == nil {
			mmBegin.t.Fatal("No results are set for the ControllerMock.Begin")
		}
		return (*mm_results).t1, (*mm_results).c2, (*mm_results).err
	}
	if mmBegin.funcBegin != nil {
		return mmBegin.funcBegin(ctx)
	}
	mmBegin.t.Fatalf("Unexpected call to ControllerMock.Begin. %v", ctx)
	return
}

// BeginAfterCounter returns a count of finished ControllerMock.Begin invocations
func (mmBegin *ControllerMock) BeginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBegin.afterBeginCounter)
}

// BeginBeforeCounter returns a count of ControllerMock.Begin invocations
func (mmBegin *ControllerMock) BeginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBegin.beforeBeginCounter)
}

// Calls returns a list of arguments used in each call to ControllerMock.Begin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBegin *mControllerMockBegin) Calls() []*ControllerMockBeginParams {
	mmBegin.mutex.RLock()

	argCopy := make([]*ControllerMockBeginParams, len(mmBegin.callArgs))
	copy(argCopy, mmBegin.callArgs)

	mmBegin.mutex.RUnlock()

	return argCopy
}

// MinimockBeginDone returns true if the count of the Begin invocations corresponds
// the number of defined expectations
func (m *ControllerMock) MinimockBeginDone() bool {
	if m.BeginMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.BeginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.BeginMock.invocationsDone()
}

// MinimockBeginInspect logs each unmet expectation
func (m *ControllerMock) MinimockBeginInspect() {
	for _, e := range m.BeginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ControllerMock.Begin with params: %#v", *e.params)
		}
	}

	afterBeginCounter := mm_atomic.LoadUint64(&m.afterBeginCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.BeginMock.defaultExpectation != nil && afterBeginCounter < 1 {
		if m.BeginMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ControllerMock.Begin")
		} else {
			m.t.Errorf("Expected call to ControllerMock.Begin with params: %#v", *m.BeginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBegin != nil && afterBeginCounter < 1 {
		m.t.Error("Expected call to ControllerMock.Begin")
	}

	if !m.BeginMock.invocationsDone() && afterBeginCounter > 0 {
		m.t.Errorf("Expected %d calls to ControllerMock.Begin but found %d calls",
			mm_atomic.LoadUint64(&m.BeginMock.expectedInvocations), afterBeginCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ControllerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockBeginInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ControllerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ControllerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBeginDone()
}
