// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

//go:generate minimock -i route256/loms/internal/usecase/order.Repository -o repository_mock.go -n RepositoryMock -p mock

import (
	"context"
	"route256/loms/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements order.Repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetByID          func(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error)
	inspectFuncGetByID   func(ctx context.Context, orderID model.OrderID)
	afterGetByIDCounter  uint64
	beforeGetByIDCounter uint64
	GetByIDMock          mRepositoryMockGetByID

	funcGetLockByID          func(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error)
	inspectFuncGetLockByID   func(ctx context.Context, orderID model.OrderID)
	afterGetLockByIDCounter  uint64
	beforeGetLockByIDCounter uint64
	GetLockByIDMock          mRepositoryMockGetLockByID

	funcSave          func(ctx context.Context, order *model.Order) (op1 *model.Order, err error)
	inspectFuncSave   func(ctx context.Context, order *model.Order)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mRepositoryMockSave
}

// NewRepositoryMock returns a mock for order.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByIDMock = mRepositoryMockGetByID{mock: m}
	m.GetByIDMock.callArgs = []*RepositoryMockGetByIDParams{}

	m.GetLockByIDMock = mRepositoryMockGetLockByID{mock: m}
	m.GetLockByIDMock.callArgs = []*RepositoryMockGetLockByIDParams{}

	m.SaveMock = mRepositoryMockSave{mock: m}
	m.SaveMock.callArgs = []*RepositoryMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockGetByID struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetByIDExpectation
	expectations       []*RepositoryMockGetByIDExpectation

	callArgs []*RepositoryMockGetByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockGetByIDExpectation specifies expectation struct of the Repository.GetByID
type RepositoryMockGetByIDExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockGetByIDParams
	paramPtrs *RepositoryMockGetByIDParamPtrs
	results   *RepositoryMockGetByIDResults
	Counter   uint64
}

// RepositoryMockGetByIDParams contains parameters of the Repository.GetByID
type RepositoryMockGetByIDParams struct {
	ctx     context.Context
	orderID model.OrderID
}

// RepositoryMockGetByIDParamPtrs contains pointers to parameters of the Repository.GetByID
type RepositoryMockGetByIDParamPtrs struct {
	ctx     *context.Context
	orderID *model.OrderID
}

// RepositoryMockGetByIDResults contains results of the Repository.GetByID
type RepositoryMockGetByIDResults struct {
	op1 *model.Order
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByID *mRepositoryMockGetByID) Optional() *mRepositoryMockGetByID {
	mmGetByID.optional = true
	return mmGetByID
}

// Expect sets up expected params for Repository.GetByID
func (mmGetByID *mRepositoryMockGetByID) Expect(ctx context.Context, orderID model.OrderID) *mRepositoryMockGetByID {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &RepositoryMockGetByIDExpectation{}
	}

	if mmGetByID.defaultExpectation.paramPtrs != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by ExpectParams functions")
	}

	mmGetByID.defaultExpectation.params = &RepositoryMockGetByIDParams{ctx, orderID}
	for _, e := range mmGetByID.expectations {
		if minimock.Equal(e.params, mmGetByID.defaultExpectation.params) {
			mmGetByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByID.defaultExpectation.params)
		}
	}

	return mmGetByID
}

// ExpectCtxParam1 sets up expected param ctx for Repository.GetByID
func (mmGetByID *mRepositoryMockGetByID) ExpectCtxParam1(ctx context.Context) *mRepositoryMockGetByID {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &RepositoryMockGetByIDExpectation{}
	}

	if mmGetByID.defaultExpectation.params != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by Expect")
	}

	if mmGetByID.defaultExpectation.paramPtrs == nil {
		mmGetByID.defaultExpectation.paramPtrs = &RepositoryMockGetByIDParamPtrs{}
	}
	mmGetByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetByID
}

// ExpectOrderIDParam2 sets up expected param orderID for Repository.GetByID
func (mmGetByID *mRepositoryMockGetByID) ExpectOrderIDParam2(orderID model.OrderID) *mRepositoryMockGetByID {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &RepositoryMockGetByIDExpectation{}
	}

	if mmGetByID.defaultExpectation.params != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by Expect")
	}

	if mmGetByID.defaultExpectation.paramPtrs == nil {
		mmGetByID.defaultExpectation.paramPtrs = &RepositoryMockGetByIDParamPtrs{}
	}
	mmGetByID.defaultExpectation.paramPtrs.orderID = &orderID

	return mmGetByID
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetByID
func (mmGetByID *mRepositoryMockGetByID) Inspect(f func(ctx context.Context, orderID model.OrderID)) *mRepositoryMockGetByID {
	if mmGetByID.mock.inspectFuncGetByID != nil {
		mmGetByID.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetByID")
	}

	mmGetByID.mock.inspectFuncGetByID = f

	return mmGetByID
}

// Return sets up results that will be returned by Repository.GetByID
func (mmGetByID *mRepositoryMockGetByID) Return(op1 *model.Order, err error) *RepositoryMock {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &RepositoryMockGetByIDExpectation{mock: mmGetByID.mock}
	}
	mmGetByID.defaultExpectation.results = &RepositoryMockGetByIDResults{op1, err}
	return mmGetByID.mock
}

// Set uses given function f to mock the Repository.GetByID method
func (mmGetByID *mRepositoryMockGetByID) Set(f func(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error)) *RepositoryMock {
	if mmGetByID.defaultExpectation != nil {
		mmGetByID.mock.t.Fatalf("Default expectation is already set for the Repository.GetByID method")
	}

	if len(mmGetByID.expectations) > 0 {
		mmGetByID.mock.t.Fatalf("Some expectations are already set for the Repository.GetByID method")
	}

	mmGetByID.mock.funcGetByID = f
	return mmGetByID.mock
}

// When sets expectation for the Repository.GetByID which will trigger the result defined by the following
// Then helper
func (mmGetByID *mRepositoryMockGetByID) When(ctx context.Context, orderID model.OrderID) *RepositoryMockGetByIDExpectation {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMock.GetByID mock is already set by Set")
	}

	expectation := &RepositoryMockGetByIDExpectation{
		mock:   mmGetByID.mock,
		params: &RepositoryMockGetByIDParams{ctx, orderID},
	}
	mmGetByID.expectations = append(mmGetByID.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetByID return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetByIDExpectation) Then(op1 *model.Order, err error) *RepositoryMock {
	e.results = &RepositoryMockGetByIDResults{op1, err}
	return e.mock
}

// Times sets number of times Repository.GetByID should be invoked
func (mmGetByID *mRepositoryMockGetByID) Times(n uint64) *mRepositoryMockGetByID {
	if n == 0 {
		mmGetByID.mock.t.Fatalf("Times of RepositoryMock.GetByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByID.expectedInvocations, n)
	return mmGetByID
}

func (mmGetByID *mRepositoryMockGetByID) invocationsDone() bool {
	if len(mmGetByID.expectations) == 0 && mmGetByID.defaultExpectation == nil && mmGetByID.mock.funcGetByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByID.mock.afterGetByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByID implements order.Repository
func (mmGetByID *RepositoryMock) GetByID(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error) {
	mm_atomic.AddUint64(&mmGetByID.beforeGetByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByID.afterGetByIDCounter, 1)

	if mmGetByID.inspectFuncGetByID != nil {
		mmGetByID.inspectFuncGetByID(ctx, orderID)
	}

	mm_params := RepositoryMockGetByIDParams{ctx, orderID}

	// Record call args
	mmGetByID.GetByIDMock.mutex.Lock()
	mmGetByID.GetByIDMock.callArgs = append(mmGetByID.GetByIDMock.callArgs, &mm_params)
	mmGetByID.GetByIDMock.mutex.Unlock()

	for _, e := range mmGetByID.GetByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetByID.GetByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByID.GetByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByID.GetByIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetByID.GetByIDMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockGetByIDParams{ctx, orderID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByID.t.Errorf("RepositoryMock.GetByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.orderID != nil && !minimock.Equal(*mm_want_ptrs.orderID, mm_got.orderID) {
				mmGetByID.t.Errorf("RepositoryMock.GetByID got unexpected parameter orderID, want: %#v, got: %#v%s\n", *mm_want_ptrs.orderID, mm_got.orderID, minimock.Diff(*mm_want_ptrs.orderID, mm_got.orderID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByID.t.Errorf("RepositoryMock.GetByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByID.GetByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByID.t.Fatal("No results are set for the RepositoryMock.GetByID")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetByID.funcGetByID != nil {
		return mmGetByID.funcGetByID(ctx, orderID)
	}
	mmGetByID.t.Fatalf("Unexpected call to RepositoryMock.GetByID. %v %v", ctx, orderID)
	return
}

// GetByIDAfterCounter returns a count of finished RepositoryMock.GetByID invocations
func (mmGetByID *RepositoryMock) GetByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.afterGetByIDCounter)
}

// GetByIDBeforeCounter returns a count of RepositoryMock.GetByID invocations
func (mmGetByID *RepositoryMock) GetByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.beforeGetByIDCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByID *mRepositoryMockGetByID) Calls() []*RepositoryMockGetByIDParams {
	mmGetByID.mutex.RLock()

	argCopy := make([]*RepositoryMockGetByIDParams, len(mmGetByID.callArgs))
	copy(argCopy, mmGetByID.callArgs)

	mmGetByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIDDone returns true if the count of the GetByID invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetByIDDone() bool {
	if m.GetByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByIDMock.invocationsDone()
}

// MinimockGetByIDInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetByIDInspect() {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetByID with params: %#v", *e.params)
		}
	}

	afterGetByIDCounter := mm_atomic.LoadUint64(&m.afterGetByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && afterGetByIDCounter < 1 {
		if m.GetByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetByID")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetByID with params: %#v", *m.GetByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && afterGetByIDCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.GetByID")
	}

	if !m.GetByIDMock.invocationsDone() && afterGetByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.GetByID but found %d calls",
			mm_atomic.LoadUint64(&m.GetByIDMock.expectedInvocations), afterGetByIDCounter)
	}
}

type mRepositoryMockGetLockByID struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetLockByIDExpectation
	expectations       []*RepositoryMockGetLockByIDExpectation

	callArgs []*RepositoryMockGetLockByIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockGetLockByIDExpectation specifies expectation struct of the Repository.GetLockByID
type RepositoryMockGetLockByIDExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockGetLockByIDParams
	paramPtrs *RepositoryMockGetLockByIDParamPtrs
	results   *RepositoryMockGetLockByIDResults
	Counter   uint64
}

// RepositoryMockGetLockByIDParams contains parameters of the Repository.GetLockByID
type RepositoryMockGetLockByIDParams struct {
	ctx     context.Context
	orderID model.OrderID
}

// RepositoryMockGetLockByIDParamPtrs contains pointers to parameters of the Repository.GetLockByID
type RepositoryMockGetLockByIDParamPtrs struct {
	ctx     *context.Context
	orderID *model.OrderID
}

// RepositoryMockGetLockByIDResults contains results of the Repository.GetLockByID
type RepositoryMockGetLockByIDResults struct {
	op1 *model.Order
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetLockByID *mRepositoryMockGetLockByID) Optional() *mRepositoryMockGetLockByID {
	mmGetLockByID.optional = true
	return mmGetLockByID
}

// Expect sets up expected params for Repository.GetLockByID
func (mmGetLockByID *mRepositoryMockGetLockByID) Expect(ctx context.Context, orderID model.OrderID) *mRepositoryMockGetLockByID {
	if mmGetLockByID.mock.funcGetLockByID != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by Set")
	}

	if mmGetLockByID.defaultExpectation == nil {
		mmGetLockByID.defaultExpectation = &RepositoryMockGetLockByIDExpectation{}
	}

	if mmGetLockByID.defaultExpectation.paramPtrs != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by ExpectParams functions")
	}

	mmGetLockByID.defaultExpectation.params = &RepositoryMockGetLockByIDParams{ctx, orderID}
	for _, e := range mmGetLockByID.expectations {
		if minimock.Equal(e.params, mmGetLockByID.defaultExpectation.params) {
			mmGetLockByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetLockByID.defaultExpectation.params)
		}
	}

	return mmGetLockByID
}

// ExpectCtxParam1 sets up expected param ctx for Repository.GetLockByID
func (mmGetLockByID *mRepositoryMockGetLockByID) ExpectCtxParam1(ctx context.Context) *mRepositoryMockGetLockByID {
	if mmGetLockByID.mock.funcGetLockByID != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by Set")
	}

	if mmGetLockByID.defaultExpectation == nil {
		mmGetLockByID.defaultExpectation = &RepositoryMockGetLockByIDExpectation{}
	}

	if mmGetLockByID.defaultExpectation.params != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by Expect")
	}

	if mmGetLockByID.defaultExpectation.paramPtrs == nil {
		mmGetLockByID.defaultExpectation.paramPtrs = &RepositoryMockGetLockByIDParamPtrs{}
	}
	mmGetLockByID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetLockByID
}

// ExpectOrderIDParam2 sets up expected param orderID for Repository.GetLockByID
func (mmGetLockByID *mRepositoryMockGetLockByID) ExpectOrderIDParam2(orderID model.OrderID) *mRepositoryMockGetLockByID {
	if mmGetLockByID.mock.funcGetLockByID != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by Set")
	}

	if mmGetLockByID.defaultExpectation == nil {
		mmGetLockByID.defaultExpectation = &RepositoryMockGetLockByIDExpectation{}
	}

	if mmGetLockByID.defaultExpectation.params != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by Expect")
	}

	if mmGetLockByID.defaultExpectation.paramPtrs == nil {
		mmGetLockByID.defaultExpectation.paramPtrs = &RepositoryMockGetLockByIDParamPtrs{}
	}
	mmGetLockByID.defaultExpectation.paramPtrs.orderID = &orderID

	return mmGetLockByID
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetLockByID
func (mmGetLockByID *mRepositoryMockGetLockByID) Inspect(f func(ctx context.Context, orderID model.OrderID)) *mRepositoryMockGetLockByID {
	if mmGetLockByID.mock.inspectFuncGetLockByID != nil {
		mmGetLockByID.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetLockByID")
	}

	mmGetLockByID.mock.inspectFuncGetLockByID = f

	return mmGetLockByID
}

// Return sets up results that will be returned by Repository.GetLockByID
func (mmGetLockByID *mRepositoryMockGetLockByID) Return(op1 *model.Order, err error) *RepositoryMock {
	if mmGetLockByID.mock.funcGetLockByID != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by Set")
	}

	if mmGetLockByID.defaultExpectation == nil {
		mmGetLockByID.defaultExpectation = &RepositoryMockGetLockByIDExpectation{mock: mmGetLockByID.mock}
	}
	mmGetLockByID.defaultExpectation.results = &RepositoryMockGetLockByIDResults{op1, err}
	return mmGetLockByID.mock
}

// Set uses given function f to mock the Repository.GetLockByID method
func (mmGetLockByID *mRepositoryMockGetLockByID) Set(f func(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error)) *RepositoryMock {
	if mmGetLockByID.defaultExpectation != nil {
		mmGetLockByID.mock.t.Fatalf("Default expectation is already set for the Repository.GetLockByID method")
	}

	if len(mmGetLockByID.expectations) > 0 {
		mmGetLockByID.mock.t.Fatalf("Some expectations are already set for the Repository.GetLockByID method")
	}

	mmGetLockByID.mock.funcGetLockByID = f
	return mmGetLockByID.mock
}

// When sets expectation for the Repository.GetLockByID which will trigger the result defined by the following
// Then helper
func (mmGetLockByID *mRepositoryMockGetLockByID) When(ctx context.Context, orderID model.OrderID) *RepositoryMockGetLockByIDExpectation {
	if mmGetLockByID.mock.funcGetLockByID != nil {
		mmGetLockByID.mock.t.Fatalf("RepositoryMock.GetLockByID mock is already set by Set")
	}

	expectation := &RepositoryMockGetLockByIDExpectation{
		mock:   mmGetLockByID.mock,
		params: &RepositoryMockGetLockByIDParams{ctx, orderID},
	}
	mmGetLockByID.expectations = append(mmGetLockByID.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetLockByID return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetLockByIDExpectation) Then(op1 *model.Order, err error) *RepositoryMock {
	e.results = &RepositoryMockGetLockByIDResults{op1, err}
	return e.mock
}

// Times sets number of times Repository.GetLockByID should be invoked
func (mmGetLockByID *mRepositoryMockGetLockByID) Times(n uint64) *mRepositoryMockGetLockByID {
	if n == 0 {
		mmGetLockByID.mock.t.Fatalf("Times of RepositoryMock.GetLockByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetLockByID.expectedInvocations, n)
	return mmGetLockByID
}

func (mmGetLockByID *mRepositoryMockGetLockByID) invocationsDone() bool {
	if len(mmGetLockByID.expectations) == 0 && mmGetLockByID.defaultExpectation == nil && mmGetLockByID.mock.funcGetLockByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetLockByID.mock.afterGetLockByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetLockByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetLockByID implements order.Repository
func (mmGetLockByID *RepositoryMock) GetLockByID(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error) {
	mm_atomic.AddUint64(&mmGetLockByID.beforeGetLockByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLockByID.afterGetLockByIDCounter, 1)

	if mmGetLockByID.inspectFuncGetLockByID != nil {
		mmGetLockByID.inspectFuncGetLockByID(ctx, orderID)
	}

	mm_params := RepositoryMockGetLockByIDParams{ctx, orderID}

	// Record call args
	mmGetLockByID.GetLockByIDMock.mutex.Lock()
	mmGetLockByID.GetLockByIDMock.callArgs = append(mmGetLockByID.GetLockByIDMock.callArgs, &mm_params)
	mmGetLockByID.GetLockByIDMock.mutex.Unlock()

	for _, e := range mmGetLockByID.GetLockByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetLockByID.GetLockByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLockByID.GetLockByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetLockByID.GetLockByIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetLockByID.GetLockByIDMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockGetLockByIDParams{ctx, orderID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetLockByID.t.Errorf("RepositoryMock.GetLockByID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.orderID != nil && !minimock.Equal(*mm_want_ptrs.orderID, mm_got.orderID) {
				mmGetLockByID.t.Errorf("RepositoryMock.GetLockByID got unexpected parameter orderID, want: %#v, got: %#v%s\n", *mm_want_ptrs.orderID, mm_got.orderID, minimock.Diff(*mm_want_ptrs.orderID, mm_got.orderID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetLockByID.t.Errorf("RepositoryMock.GetLockByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetLockByID.GetLockByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLockByID.t.Fatal("No results are set for the RepositoryMock.GetLockByID")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetLockByID.funcGetLockByID != nil {
		return mmGetLockByID.funcGetLockByID(ctx, orderID)
	}
	mmGetLockByID.t.Fatalf("Unexpected call to RepositoryMock.GetLockByID. %v %v", ctx, orderID)
	return
}

// GetLockByIDAfterCounter returns a count of finished RepositoryMock.GetLockByID invocations
func (mmGetLockByID *RepositoryMock) GetLockByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLockByID.afterGetLockByIDCounter)
}

// GetLockByIDBeforeCounter returns a count of RepositoryMock.GetLockByID invocations
func (mmGetLockByID *RepositoryMock) GetLockByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLockByID.beforeGetLockByIDCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetLockByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetLockByID *mRepositoryMockGetLockByID) Calls() []*RepositoryMockGetLockByIDParams {
	mmGetLockByID.mutex.RLock()

	argCopy := make([]*RepositoryMockGetLockByIDParams, len(mmGetLockByID.callArgs))
	copy(argCopy, mmGetLockByID.callArgs)

	mmGetLockByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetLockByIDDone returns true if the count of the GetLockByID invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetLockByIDDone() bool {
	if m.GetLockByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetLockByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetLockByIDMock.invocationsDone()
}

// MinimockGetLockByIDInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetLockByIDInspect() {
	for _, e := range m.GetLockByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetLockByID with params: %#v", *e.params)
		}
	}

	afterGetLockByIDCounter := mm_atomic.LoadUint64(&m.afterGetLockByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetLockByIDMock.defaultExpectation != nil && afterGetLockByIDCounter < 1 {
		if m.GetLockByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetLockByID")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetLockByID with params: %#v", *m.GetLockByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLockByID != nil && afterGetLockByIDCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.GetLockByID")
	}

	if !m.GetLockByIDMock.invocationsDone() && afterGetLockByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.GetLockByID but found %d calls",
			mm_atomic.LoadUint64(&m.GetLockByIDMock.expectedInvocations), afterGetLockByIDCounter)
	}
}

type mRepositoryMockSave struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockSaveExpectation
	expectations       []*RepositoryMockSaveExpectation

	callArgs []*RepositoryMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockSaveExpectation specifies expectation struct of the Repository.Save
type RepositoryMockSaveExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockSaveParams
	paramPtrs *RepositoryMockSaveParamPtrs
	results   *RepositoryMockSaveResults
	Counter   uint64
}

// RepositoryMockSaveParams contains parameters of the Repository.Save
type RepositoryMockSaveParams struct {
	ctx   context.Context
	order *model.Order
}

// RepositoryMockSaveParamPtrs contains pointers to parameters of the Repository.Save
type RepositoryMockSaveParamPtrs struct {
	ctx   *context.Context
	order **model.Order
}

// RepositoryMockSaveResults contains results of the Repository.Save
type RepositoryMockSaveResults struct {
	op1 *model.Order
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mRepositoryMockSave) Optional() *mRepositoryMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for Repository.Save
func (mmSave *mRepositoryMockSave) Expect(ctx context.Context, order *model.Order) *mRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &RepositoryMockSaveParams{ctx, order}
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for Repository.Save
func (mmSave *mRepositoryMockSave) ExpectCtxParam1(ctx context.Context) *mRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &RepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSave
}

// ExpectOrderParam2 sets up expected param order for Repository.Save
func (mmSave *mRepositoryMockSave) ExpectOrderParam2(order *model.Order) *mRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &RepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.order = &order

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the Repository.Save
func (mmSave *mRepositoryMockSave) Inspect(f func(ctx context.Context, order *model.Order)) *mRepositoryMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by Repository.Save
func (mmSave *mRepositoryMockSave) Return(op1 *model.Order, err error) *RepositoryMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &RepositoryMockSaveResults{op1, err}
	return mmSave.mock
}

// Set uses given function f to mock the Repository.Save method
func (mmSave *mRepositoryMockSave) Set(f func(ctx context.Context, order *model.Order) (op1 *model.Order, err error)) *RepositoryMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the Repository.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the Repository.Save method")
	}

	mmSave.mock.funcSave = f
	return mmSave.mock
}

// When sets expectation for the Repository.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mRepositoryMockSave) When(ctx context.Context, order *model.Order) *RepositoryMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	expectation := &RepositoryMockSaveExpectation{
		mock:   mmSave.mock,
		params: &RepositoryMockSaveParams{ctx, order},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up Repository.Save return parameters for the expectation previously defined by the When method
func (e *RepositoryMockSaveExpectation) Then(op1 *model.Order, err error) *RepositoryMock {
	e.results = &RepositoryMockSaveResults{op1, err}
	return e.mock
}

// Times sets number of times Repository.Save should be invoked
func (mmSave *mRepositoryMockSave) Times(n uint64) *mRepositoryMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of RepositoryMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	return mmSave
}

func (mmSave *mRepositoryMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements order.Repository
func (mmSave *RepositoryMock) Save(ctx context.Context, order *model.Order) (op1 *model.Order, err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, order)
	}

	mm_params := RepositoryMockSaveParams{ctx, order}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockSaveParams{ctx, order}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("RepositoryMock.Save got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmSave.t.Errorf("RepositoryMock.Save got unexpected parameter order, want: %#v, got: %#v%s\n", *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("RepositoryMock.Save got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the RepositoryMock.Save")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, order)
	}
	mmSave.t.Fatalf("Unexpected call to RepositoryMock.Save. %v %v", ctx, order)
	return
}

// SaveAfterCounter returns a count of finished RepositoryMock.Save invocations
func (mmSave *RepositoryMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of RepositoryMock.Save invocations
func (mmSave *RepositoryMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mRepositoryMockSave) Calls() []*RepositoryMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*RepositoryMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *RepositoryMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Save with params: %#v", *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.Save")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Save with params: %#v", *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.Save")
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.Save but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetByIDInspect()

			m.MinimockGetLockByIDInspect()

			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByIDDone() &&
		m.MinimockGetLockByIDDone() &&
		m.MinimockSaveDone()
}
