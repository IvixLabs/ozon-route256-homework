// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

//go:generate minimock -i route256/loms/internal/usecase/stock.Repository -o repository_mock.go -n RepositoryMock -p mock

import (
	"context"
	"route256/loms/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements stock.Repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetBySku          func(ctx context.Context, sku model.Sku) (sp1 *model.Stock, err error)
	inspectFuncGetBySku   func(ctx context.Context, sku model.Sku)
	afterGetBySkuCounter  uint64
	beforeGetBySkuCounter uint64
	GetBySkuMock          mRepositoryMockGetBySku

	funcGetLockBySku          func(ctx context.Context, sku model.Sku) (sp1 *model.Stock, err error)
	inspectFuncGetLockBySku   func(ctx context.Context, sku model.Sku)
	afterGetLockBySkuCounter  uint64
	beforeGetLockBySkuCounter uint64
	GetLockBySkuMock          mRepositoryMockGetLockBySku

	funcSave          func(ctx context.Context, stock *model.Stock) (err error)
	inspectFuncSave   func(ctx context.Context, stock *model.Stock)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mRepositoryMockSave
}

// NewRepositoryMock returns a mock for stock.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetBySkuMock = mRepositoryMockGetBySku{mock: m}
	m.GetBySkuMock.callArgs = []*RepositoryMockGetBySkuParams{}

	m.GetLockBySkuMock = mRepositoryMockGetLockBySku{mock: m}
	m.GetLockBySkuMock.callArgs = []*RepositoryMockGetLockBySkuParams{}

	m.SaveMock = mRepositoryMockSave{mock: m}
	m.SaveMock.callArgs = []*RepositoryMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockGetBySku struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetBySkuExpectation
	expectations       []*RepositoryMockGetBySkuExpectation

	callArgs []*RepositoryMockGetBySkuParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockGetBySkuExpectation specifies expectation struct of the Repository.GetBySku
type RepositoryMockGetBySkuExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockGetBySkuParams
	paramPtrs *RepositoryMockGetBySkuParamPtrs
	results   *RepositoryMockGetBySkuResults
	Counter   uint64
}

// RepositoryMockGetBySkuParams contains parameters of the Repository.GetBySku
type RepositoryMockGetBySkuParams struct {
	ctx context.Context
	sku model.Sku
}

// RepositoryMockGetBySkuParamPtrs contains pointers to parameters of the Repository.GetBySku
type RepositoryMockGetBySkuParamPtrs struct {
	ctx *context.Context
	sku *model.Sku
}

// RepositoryMockGetBySkuResults contains results of the Repository.GetBySku
type RepositoryMockGetBySkuResults struct {
	sp1 *model.Stock
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetBySku *mRepositoryMockGetBySku) Optional() *mRepositoryMockGetBySku {
	mmGetBySku.optional = true
	return mmGetBySku
}

// Expect sets up expected params for Repository.GetBySku
func (mmGetBySku *mRepositoryMockGetBySku) Expect(ctx context.Context, sku model.Sku) *mRepositoryMockGetBySku {
	if mmGetBySku.mock.funcGetBySku != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by Set")
	}

	if mmGetBySku.defaultExpectation == nil {
		mmGetBySku.defaultExpectation = &RepositoryMockGetBySkuExpectation{}
	}

	if mmGetBySku.defaultExpectation.paramPtrs != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by ExpectParams functions")
	}

	mmGetBySku.defaultExpectation.params = &RepositoryMockGetBySkuParams{ctx, sku}
	for _, e := range mmGetBySku.expectations {
		if minimock.Equal(e.params, mmGetBySku.defaultExpectation.params) {
			mmGetBySku.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetBySku.defaultExpectation.params)
		}
	}

	return mmGetBySku
}

// ExpectCtxParam1 sets up expected param ctx for Repository.GetBySku
func (mmGetBySku *mRepositoryMockGetBySku) ExpectCtxParam1(ctx context.Context) *mRepositoryMockGetBySku {
	if mmGetBySku.mock.funcGetBySku != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by Set")
	}

	if mmGetBySku.defaultExpectation == nil {
		mmGetBySku.defaultExpectation = &RepositoryMockGetBySkuExpectation{}
	}

	if mmGetBySku.defaultExpectation.params != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by Expect")
	}

	if mmGetBySku.defaultExpectation.paramPtrs == nil {
		mmGetBySku.defaultExpectation.paramPtrs = &RepositoryMockGetBySkuParamPtrs{}
	}
	mmGetBySku.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetBySku
}

// ExpectSkuParam2 sets up expected param sku for Repository.GetBySku
func (mmGetBySku *mRepositoryMockGetBySku) ExpectSkuParam2(sku model.Sku) *mRepositoryMockGetBySku {
	if mmGetBySku.mock.funcGetBySku != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by Set")
	}

	if mmGetBySku.defaultExpectation == nil {
		mmGetBySku.defaultExpectation = &RepositoryMockGetBySkuExpectation{}
	}

	if mmGetBySku.defaultExpectation.params != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by Expect")
	}

	if mmGetBySku.defaultExpectation.paramPtrs == nil {
		mmGetBySku.defaultExpectation.paramPtrs = &RepositoryMockGetBySkuParamPtrs{}
	}
	mmGetBySku.defaultExpectation.paramPtrs.sku = &sku

	return mmGetBySku
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetBySku
func (mmGetBySku *mRepositoryMockGetBySku) Inspect(f func(ctx context.Context, sku model.Sku)) *mRepositoryMockGetBySku {
	if mmGetBySku.mock.inspectFuncGetBySku != nil {
		mmGetBySku.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetBySku")
	}

	mmGetBySku.mock.inspectFuncGetBySku = f

	return mmGetBySku
}

// Return sets up results that will be returned by Repository.GetBySku
func (mmGetBySku *mRepositoryMockGetBySku) Return(sp1 *model.Stock, err error) *RepositoryMock {
	if mmGetBySku.mock.funcGetBySku != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by Set")
	}

	if mmGetBySku.defaultExpectation == nil {
		mmGetBySku.defaultExpectation = &RepositoryMockGetBySkuExpectation{mock: mmGetBySku.mock}
	}
	mmGetBySku.defaultExpectation.results = &RepositoryMockGetBySkuResults{sp1, err}
	return mmGetBySku.mock
}

// Set uses given function f to mock the Repository.GetBySku method
func (mmGetBySku *mRepositoryMockGetBySku) Set(f func(ctx context.Context, sku model.Sku) (sp1 *model.Stock, err error)) *RepositoryMock {
	if mmGetBySku.defaultExpectation != nil {
		mmGetBySku.mock.t.Fatalf("Default expectation is already set for the Repository.GetBySku method")
	}

	if len(mmGetBySku.expectations) > 0 {
		mmGetBySku.mock.t.Fatalf("Some expectations are already set for the Repository.GetBySku method")
	}

	mmGetBySku.mock.funcGetBySku = f
	return mmGetBySku.mock
}

// When sets expectation for the Repository.GetBySku which will trigger the result defined by the following
// Then helper
func (mmGetBySku *mRepositoryMockGetBySku) When(ctx context.Context, sku model.Sku) *RepositoryMockGetBySkuExpectation {
	if mmGetBySku.mock.funcGetBySku != nil {
		mmGetBySku.mock.t.Fatalf("RepositoryMock.GetBySku mock is already set by Set")
	}

	expectation := &RepositoryMockGetBySkuExpectation{
		mock:   mmGetBySku.mock,
		params: &RepositoryMockGetBySkuParams{ctx, sku},
	}
	mmGetBySku.expectations = append(mmGetBySku.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetBySku return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetBySkuExpectation) Then(sp1 *model.Stock, err error) *RepositoryMock {
	e.results = &RepositoryMockGetBySkuResults{sp1, err}
	return e.mock
}

// Times sets number of times Repository.GetBySku should be invoked
func (mmGetBySku *mRepositoryMockGetBySku) Times(n uint64) *mRepositoryMockGetBySku {
	if n == 0 {
		mmGetBySku.mock.t.Fatalf("Times of RepositoryMock.GetBySku mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetBySku.expectedInvocations, n)
	return mmGetBySku
}

func (mmGetBySku *mRepositoryMockGetBySku) invocationsDone() bool {
	if len(mmGetBySku.expectations) == 0 && mmGetBySku.defaultExpectation == nil && mmGetBySku.mock.funcGetBySku == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetBySku.mock.afterGetBySkuCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetBySku.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetBySku implements stock.Repository
func (mmGetBySku *RepositoryMock) GetBySku(ctx context.Context, sku model.Sku) (sp1 *model.Stock, err error) {
	mm_atomic.AddUint64(&mmGetBySku.beforeGetBySkuCounter, 1)
	defer mm_atomic.AddUint64(&mmGetBySku.afterGetBySkuCounter, 1)

	if mmGetBySku.inspectFuncGetBySku != nil {
		mmGetBySku.inspectFuncGetBySku(ctx, sku)
	}

	mm_params := RepositoryMockGetBySkuParams{ctx, sku}

	// Record call args
	mmGetBySku.GetBySkuMock.mutex.Lock()
	mmGetBySku.GetBySkuMock.callArgs = append(mmGetBySku.GetBySkuMock.callArgs, &mm_params)
	mmGetBySku.GetBySkuMock.mutex.Unlock()

	for _, e := range mmGetBySku.GetBySkuMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetBySku.GetBySkuMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetBySku.GetBySkuMock.defaultExpectation.Counter, 1)
		mm_want := mmGetBySku.GetBySkuMock.defaultExpectation.params
		mm_want_ptrs := mmGetBySku.GetBySkuMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockGetBySkuParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetBySku.t.Errorf("RepositoryMock.GetBySku got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetBySku.t.Errorf("RepositoryMock.GetBySku got unexpected parameter sku, want: %#v, got: %#v%s\n", *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetBySku.t.Errorf("RepositoryMock.GetBySku got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetBySku.GetBySkuMock.defaultExpectation.results
		if mm_results == nil {
			mmGetBySku.t.Fatal("No results are set for the RepositoryMock.GetBySku")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetBySku.funcGetBySku != nil {
		return mmGetBySku.funcGetBySku(ctx, sku)
	}
	mmGetBySku.t.Fatalf("Unexpected call to RepositoryMock.GetBySku. %v %v", ctx, sku)
	return
}

// GetBySkuAfterCounter returns a count of finished RepositoryMock.GetBySku invocations
func (mmGetBySku *RepositoryMock) GetBySkuAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBySku.afterGetBySkuCounter)
}

// GetBySkuBeforeCounter returns a count of RepositoryMock.GetBySku invocations
func (mmGetBySku *RepositoryMock) GetBySkuBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBySku.beforeGetBySkuCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetBySku.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetBySku *mRepositoryMockGetBySku) Calls() []*RepositoryMockGetBySkuParams {
	mmGetBySku.mutex.RLock()

	argCopy := make([]*RepositoryMockGetBySkuParams, len(mmGetBySku.callArgs))
	copy(argCopy, mmGetBySku.callArgs)

	mmGetBySku.mutex.RUnlock()

	return argCopy
}

// MinimockGetBySkuDone returns true if the count of the GetBySku invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetBySkuDone() bool {
	if m.GetBySkuMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetBySkuMock.invocationsDone()
}

// MinimockGetBySkuInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetBySkuInspect() {
	for _, e := range m.GetBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetBySku with params: %#v", *e.params)
		}
	}

	afterGetBySkuCounter := mm_atomic.LoadUint64(&m.afterGetBySkuCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetBySkuMock.defaultExpectation != nil && afterGetBySkuCounter < 1 {
		if m.GetBySkuMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetBySku")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetBySku with params: %#v", *m.GetBySkuMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBySku != nil && afterGetBySkuCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.GetBySku")
	}

	if !m.GetBySkuMock.invocationsDone() && afterGetBySkuCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.GetBySku but found %d calls",
			mm_atomic.LoadUint64(&m.GetBySkuMock.expectedInvocations), afterGetBySkuCounter)
	}
}

type mRepositoryMockGetLockBySku struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetLockBySkuExpectation
	expectations       []*RepositoryMockGetLockBySkuExpectation

	callArgs []*RepositoryMockGetLockBySkuParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockGetLockBySkuExpectation specifies expectation struct of the Repository.GetLockBySku
type RepositoryMockGetLockBySkuExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockGetLockBySkuParams
	paramPtrs *RepositoryMockGetLockBySkuParamPtrs
	results   *RepositoryMockGetLockBySkuResults
	Counter   uint64
}

// RepositoryMockGetLockBySkuParams contains parameters of the Repository.GetLockBySku
type RepositoryMockGetLockBySkuParams struct {
	ctx context.Context
	sku model.Sku
}

// RepositoryMockGetLockBySkuParamPtrs contains pointers to parameters of the Repository.GetLockBySku
type RepositoryMockGetLockBySkuParamPtrs struct {
	ctx *context.Context
	sku *model.Sku
}

// RepositoryMockGetLockBySkuResults contains results of the Repository.GetLockBySku
type RepositoryMockGetLockBySkuResults struct {
	sp1 *model.Stock
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetLockBySku *mRepositoryMockGetLockBySku) Optional() *mRepositoryMockGetLockBySku {
	mmGetLockBySku.optional = true
	return mmGetLockBySku
}

// Expect sets up expected params for Repository.GetLockBySku
func (mmGetLockBySku *mRepositoryMockGetLockBySku) Expect(ctx context.Context, sku model.Sku) *mRepositoryMockGetLockBySku {
	if mmGetLockBySku.mock.funcGetLockBySku != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by Set")
	}

	if mmGetLockBySku.defaultExpectation == nil {
		mmGetLockBySku.defaultExpectation = &RepositoryMockGetLockBySkuExpectation{}
	}

	if mmGetLockBySku.defaultExpectation.paramPtrs != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by ExpectParams functions")
	}

	mmGetLockBySku.defaultExpectation.params = &RepositoryMockGetLockBySkuParams{ctx, sku}
	for _, e := range mmGetLockBySku.expectations {
		if minimock.Equal(e.params, mmGetLockBySku.defaultExpectation.params) {
			mmGetLockBySku.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetLockBySku.defaultExpectation.params)
		}
	}

	return mmGetLockBySku
}

// ExpectCtxParam1 sets up expected param ctx for Repository.GetLockBySku
func (mmGetLockBySku *mRepositoryMockGetLockBySku) ExpectCtxParam1(ctx context.Context) *mRepositoryMockGetLockBySku {
	if mmGetLockBySku.mock.funcGetLockBySku != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by Set")
	}

	if mmGetLockBySku.defaultExpectation == nil {
		mmGetLockBySku.defaultExpectation = &RepositoryMockGetLockBySkuExpectation{}
	}

	if mmGetLockBySku.defaultExpectation.params != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by Expect")
	}

	if mmGetLockBySku.defaultExpectation.paramPtrs == nil {
		mmGetLockBySku.defaultExpectation.paramPtrs = &RepositoryMockGetLockBySkuParamPtrs{}
	}
	mmGetLockBySku.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetLockBySku
}

// ExpectSkuParam2 sets up expected param sku for Repository.GetLockBySku
func (mmGetLockBySku *mRepositoryMockGetLockBySku) ExpectSkuParam2(sku model.Sku) *mRepositoryMockGetLockBySku {
	if mmGetLockBySku.mock.funcGetLockBySku != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by Set")
	}

	if mmGetLockBySku.defaultExpectation == nil {
		mmGetLockBySku.defaultExpectation = &RepositoryMockGetLockBySkuExpectation{}
	}

	if mmGetLockBySku.defaultExpectation.params != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by Expect")
	}

	if mmGetLockBySku.defaultExpectation.paramPtrs == nil {
		mmGetLockBySku.defaultExpectation.paramPtrs = &RepositoryMockGetLockBySkuParamPtrs{}
	}
	mmGetLockBySku.defaultExpectation.paramPtrs.sku = &sku

	return mmGetLockBySku
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetLockBySku
func (mmGetLockBySku *mRepositoryMockGetLockBySku) Inspect(f func(ctx context.Context, sku model.Sku)) *mRepositoryMockGetLockBySku {
	if mmGetLockBySku.mock.inspectFuncGetLockBySku != nil {
		mmGetLockBySku.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetLockBySku")
	}

	mmGetLockBySku.mock.inspectFuncGetLockBySku = f

	return mmGetLockBySku
}

// Return sets up results that will be returned by Repository.GetLockBySku
func (mmGetLockBySku *mRepositoryMockGetLockBySku) Return(sp1 *model.Stock, err error) *RepositoryMock {
	if mmGetLockBySku.mock.funcGetLockBySku != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by Set")
	}

	if mmGetLockBySku.defaultExpectation == nil {
		mmGetLockBySku.defaultExpectation = &RepositoryMockGetLockBySkuExpectation{mock: mmGetLockBySku.mock}
	}
	mmGetLockBySku.defaultExpectation.results = &RepositoryMockGetLockBySkuResults{sp1, err}
	return mmGetLockBySku.mock
}

// Set uses given function f to mock the Repository.GetLockBySku method
func (mmGetLockBySku *mRepositoryMockGetLockBySku) Set(f func(ctx context.Context, sku model.Sku) (sp1 *model.Stock, err error)) *RepositoryMock {
	if mmGetLockBySku.defaultExpectation != nil {
		mmGetLockBySku.mock.t.Fatalf("Default expectation is already set for the Repository.GetLockBySku method")
	}

	if len(mmGetLockBySku.expectations) > 0 {
		mmGetLockBySku.mock.t.Fatalf("Some expectations are already set for the Repository.GetLockBySku method")
	}

	mmGetLockBySku.mock.funcGetLockBySku = f
	return mmGetLockBySku.mock
}

// When sets expectation for the Repository.GetLockBySku which will trigger the result defined by the following
// Then helper
func (mmGetLockBySku *mRepositoryMockGetLockBySku) When(ctx context.Context, sku model.Sku) *RepositoryMockGetLockBySkuExpectation {
	if mmGetLockBySku.mock.funcGetLockBySku != nil {
		mmGetLockBySku.mock.t.Fatalf("RepositoryMock.GetLockBySku mock is already set by Set")
	}

	expectation := &RepositoryMockGetLockBySkuExpectation{
		mock:   mmGetLockBySku.mock,
		params: &RepositoryMockGetLockBySkuParams{ctx, sku},
	}
	mmGetLockBySku.expectations = append(mmGetLockBySku.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetLockBySku return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetLockBySkuExpectation) Then(sp1 *model.Stock, err error) *RepositoryMock {
	e.results = &RepositoryMockGetLockBySkuResults{sp1, err}
	return e.mock
}

// Times sets number of times Repository.GetLockBySku should be invoked
func (mmGetLockBySku *mRepositoryMockGetLockBySku) Times(n uint64) *mRepositoryMockGetLockBySku {
	if n == 0 {
		mmGetLockBySku.mock.t.Fatalf("Times of RepositoryMock.GetLockBySku mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetLockBySku.expectedInvocations, n)
	return mmGetLockBySku
}

func (mmGetLockBySku *mRepositoryMockGetLockBySku) invocationsDone() bool {
	if len(mmGetLockBySku.expectations) == 0 && mmGetLockBySku.defaultExpectation == nil && mmGetLockBySku.mock.funcGetLockBySku == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetLockBySku.mock.afterGetLockBySkuCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetLockBySku.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetLockBySku implements stock.Repository
func (mmGetLockBySku *RepositoryMock) GetLockBySku(ctx context.Context, sku model.Sku) (sp1 *model.Stock, err error) {
	mm_atomic.AddUint64(&mmGetLockBySku.beforeGetLockBySkuCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLockBySku.afterGetLockBySkuCounter, 1)

	if mmGetLockBySku.inspectFuncGetLockBySku != nil {
		mmGetLockBySku.inspectFuncGetLockBySku(ctx, sku)
	}

	mm_params := RepositoryMockGetLockBySkuParams{ctx, sku}

	// Record call args
	mmGetLockBySku.GetLockBySkuMock.mutex.Lock()
	mmGetLockBySku.GetLockBySkuMock.callArgs = append(mmGetLockBySku.GetLockBySkuMock.callArgs, &mm_params)
	mmGetLockBySku.GetLockBySkuMock.mutex.Unlock()

	for _, e := range mmGetLockBySku.GetLockBySkuMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetLockBySku.GetLockBySkuMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLockBySku.GetLockBySkuMock.defaultExpectation.Counter, 1)
		mm_want := mmGetLockBySku.GetLockBySkuMock.defaultExpectation.params
		mm_want_ptrs := mmGetLockBySku.GetLockBySkuMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockGetLockBySkuParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetLockBySku.t.Errorf("RepositoryMock.GetLockBySku got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetLockBySku.t.Errorf("RepositoryMock.GetLockBySku got unexpected parameter sku, want: %#v, got: %#v%s\n", *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetLockBySku.t.Errorf("RepositoryMock.GetLockBySku got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetLockBySku.GetLockBySkuMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLockBySku.t.Fatal("No results are set for the RepositoryMock.GetLockBySku")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetLockBySku.funcGetLockBySku != nil {
		return mmGetLockBySku.funcGetLockBySku(ctx, sku)
	}
	mmGetLockBySku.t.Fatalf("Unexpected call to RepositoryMock.GetLockBySku. %v %v", ctx, sku)
	return
}

// GetLockBySkuAfterCounter returns a count of finished RepositoryMock.GetLockBySku invocations
func (mmGetLockBySku *RepositoryMock) GetLockBySkuAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLockBySku.afterGetLockBySkuCounter)
}

// GetLockBySkuBeforeCounter returns a count of RepositoryMock.GetLockBySku invocations
func (mmGetLockBySku *RepositoryMock) GetLockBySkuBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLockBySku.beforeGetLockBySkuCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetLockBySku.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetLockBySku *mRepositoryMockGetLockBySku) Calls() []*RepositoryMockGetLockBySkuParams {
	mmGetLockBySku.mutex.RLock()

	argCopy := make([]*RepositoryMockGetLockBySkuParams, len(mmGetLockBySku.callArgs))
	copy(argCopy, mmGetLockBySku.callArgs)

	mmGetLockBySku.mutex.RUnlock()

	return argCopy
}

// MinimockGetLockBySkuDone returns true if the count of the GetLockBySku invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetLockBySkuDone() bool {
	if m.GetLockBySkuMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetLockBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetLockBySkuMock.invocationsDone()
}

// MinimockGetLockBySkuInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetLockBySkuInspect() {
	for _, e := range m.GetLockBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetLockBySku with params: %#v", *e.params)
		}
	}

	afterGetLockBySkuCounter := mm_atomic.LoadUint64(&m.afterGetLockBySkuCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetLockBySkuMock.defaultExpectation != nil && afterGetLockBySkuCounter < 1 {
		if m.GetLockBySkuMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetLockBySku")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetLockBySku with params: %#v", *m.GetLockBySkuMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLockBySku != nil && afterGetLockBySkuCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.GetLockBySku")
	}

	if !m.GetLockBySkuMock.invocationsDone() && afterGetLockBySkuCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.GetLockBySku but found %d calls",
			mm_atomic.LoadUint64(&m.GetLockBySkuMock.expectedInvocations), afterGetLockBySkuCounter)
	}
}

type mRepositoryMockSave struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockSaveExpectation
	expectations       []*RepositoryMockSaveExpectation

	callArgs []*RepositoryMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockSaveExpectation specifies expectation struct of the Repository.Save
type RepositoryMockSaveExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockSaveParams
	paramPtrs *RepositoryMockSaveParamPtrs
	results   *RepositoryMockSaveResults
	Counter   uint64
}

// RepositoryMockSaveParams contains parameters of the Repository.Save
type RepositoryMockSaveParams struct {
	ctx   context.Context
	stock *model.Stock
}

// RepositoryMockSaveParamPtrs contains pointers to parameters of the Repository.Save
type RepositoryMockSaveParamPtrs struct {
	ctx   *context.Context
	stock **model.Stock
}

// RepositoryMockSaveResults contains results of the Repository.Save
type RepositoryMockSaveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mRepositoryMockSave) Optional() *mRepositoryMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for Repository.Save
func (mmSave *mRepositoryMockSave) Expect(ctx context.Context, stock *model.Stock) *mRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &RepositoryMockSaveParams{ctx, stock}
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for Repository.Save
func (mmSave *mRepositoryMockSave) ExpectCtxParam1(ctx context.Context) *mRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &RepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSave
}

// ExpectStockParam2 sets up expected param stock for Repository.Save
func (mmSave *mRepositoryMockSave) ExpectStockParam2(stock *model.Stock) *mRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &RepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.stock = &stock

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the Repository.Save
func (mmSave *mRepositoryMockSave) Inspect(f func(ctx context.Context, stock *model.Stock)) *mRepositoryMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by Repository.Save
func (mmSave *mRepositoryMockSave) Return(err error) *RepositoryMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &RepositoryMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &RepositoryMockSaveResults{err}
	return mmSave.mock
}

// Set uses given function f to mock the Repository.Save method
func (mmSave *mRepositoryMockSave) Set(f func(ctx context.Context, stock *model.Stock) (err error)) *RepositoryMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the Repository.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the Repository.Save method")
	}

	mmSave.mock.funcSave = f
	return mmSave.mock
}

// When sets expectation for the Repository.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mRepositoryMockSave) When(ctx context.Context, stock *model.Stock) *RepositoryMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("RepositoryMock.Save mock is already set by Set")
	}

	expectation := &RepositoryMockSaveExpectation{
		mock:   mmSave.mock,
		params: &RepositoryMockSaveParams{ctx, stock},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up Repository.Save return parameters for the expectation previously defined by the When method
func (e *RepositoryMockSaveExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockSaveResults{err}
	return e.mock
}

// Times sets number of times Repository.Save should be invoked
func (mmSave *mRepositoryMockSave) Times(n uint64) *mRepositoryMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of RepositoryMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	return mmSave
}

func (mmSave *mRepositoryMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements stock.Repository
func (mmSave *RepositoryMock) Save(ctx context.Context, stock *model.Stock) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, stock)
	}

	mm_params := RepositoryMockSaveParams{ctx, stock}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockSaveParams{ctx, stock}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("RepositoryMock.Save got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.stock != nil && !minimock.Equal(*mm_want_ptrs.stock, mm_got.stock) {
				mmSave.t.Errorf("RepositoryMock.Save got unexpected parameter stock, want: %#v, got: %#v%s\n", *mm_want_ptrs.stock, mm_got.stock, minimock.Diff(*mm_want_ptrs.stock, mm_got.stock))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("RepositoryMock.Save got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the RepositoryMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, stock)
	}
	mmSave.t.Fatalf("Unexpected call to RepositoryMock.Save. %v %v", ctx, stock)
	return
}

// SaveAfterCounter returns a count of finished RepositoryMock.Save invocations
func (mmSave *RepositoryMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of RepositoryMock.Save invocations
func (mmSave *RepositoryMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mRepositoryMockSave) Calls() []*RepositoryMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*RepositoryMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *RepositoryMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Save with params: %#v", *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.Save")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Save with params: %#v", *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.Save")
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.Save but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetBySkuInspect()

			m.MinimockGetLockBySkuInspect()

			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetBySkuDone() &&
		m.MinimockGetLockBySkuDone() &&
		m.MinimockSaveDone()
}
