// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getByID = `-- name: GetByID :many
SELECT id, user_id, status, order_item.sku, order_item.count
FROM "order"
       LEFT JOIN order_item ON "order".id = order_item.order_id
WHERE "order".id = $1
`

type GetByIDRow struct {
	ID     int32
	UserID int32
	Status OrderStatus
	Sku    pgtype.Int4
	Count  pgtype.Int4
}

func (q *Queries) GetByID(ctx context.Context, id int32) ([]GetByIDRow, error) {
	rows, err := q.db.Query(ctx, getByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetByIDRow
	for rows.Next() {
		var i GetByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Sku,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLockByID = `-- name: GetLockByID :many
SELECT id, user_id, status, order_item.sku, order_item.count
FROM "order"
       LEFT JOIN order_item ON "order".id = order_item.order_id
WHERE "order".id = $1
  FOR UPDATE OF "order"
`

type GetLockByIDRow struct {
	ID     int32
	UserID int32
	Status OrderStatus
	Sku    pgtype.Int4
	Count  pgtype.Int4
}

func (q *Queries) GetLockByID(ctx context.Context, id int32) ([]GetLockByIDRow, error) {
	rows, err := q.db.Query(ctx, getLockByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLockByIDRow
	for rows.Next() {
		var i GetLockByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Sku,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO "order" (id, user_id, status)
VALUES (nextval('order_id_manual_seq')+($3::int), $1, $2)
RETURNING id
`

type InsertOrderParams struct {
	UserID  int32
	Status  OrderStatus
	ShardID int32
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertOrder, arg.UserID, arg.Status, arg.ShardID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const saveOrderItem = `-- name: SaveOrderItem :exec
INSERT INTO order_item (order_id, sku, count)
VALUES ($1, $2, $3)
ON CONFLICT (order_id, sku) DO UPDATE
  SET count = EXCLUDED.count
`

type SaveOrderItemParams struct {
	OrderID int32
	Sku     int32
	Count   int32
}

func (q *Queries) SaveOrderItem(ctx context.Context, arg SaveOrderItemParams) error {
	_, err := q.db.Exec(ctx, saveOrderItem, arg.OrderID, arg.Sku, arg.Count)
	return err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE "order"
SET user_id = $1,
    status  = $2
WHERE id = $3
`

type UpdateOrderParams struct {
	UserID int32
	Status OrderStatus
	ID     int32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder, arg.UserID, arg.Status, arg.ID)
	return err
}
